Trees
	-Def. A tree may be defined recursively as:
		-the empty tree
		or
		-a node attached to one or more trees
	-Parts
		-root - the head
		-leaves - lowest level nodes
		
	Remark: A node may have many children, but at most one parent
		-root has no parent
		
Binary Trees
	Def: A binary tree is a tree in which every node has exactly two children
		-(children can be null so exactly = at most)
		
	-two children
		-left
		-right
Binary Search trees
	Def: A binary search tree is a binary tree in which every node satisfies the following:
		-values in the node's left subtree are smaller than the value in the node
		-values in the nodes right subtree are greater than the value in the node
		
		
class TreeNode <Type>
{
	Type datum;
	TreeNode <Type> left;
	TreeNode <Type> right;
	getter and setter
}

class Tree <Type extends Comparable<? super Type>>
{
	TreeNode<Type> root;
	public Tree()
	{
			root = null;
			left = null;
			right = null;
	}
	
	public boolean search(Type target)
	{
		TreeNode current = root;
		while (current != null)
		{
			if (current.getDatum().equals(target))
			{
				return true;
			}
			if (current.getDatum().compareTo(target) < 0)
			{
				current = current.getRight();
			}
			else
			{
				current = current.getLeft();
			}
		}
		
		return false; //I fell off the end of the tree
	}
	
	public boolean search(Type target)
	{
		return search(target, root);
	}
	private boolean search(Type target, TreeNode<Type> current)
	{
		if (current == null)
		{
			return false;
		}
		if (current.getDatum().equals(target))
		{
			return true;
		}
		if (current.getDatum().compareTo(target) < 0)
			{
				return search(target, current.getRight());
			}
		else
		{
			return search(target, current.getLeft());
		}
	}
	
	public boolean add(Type newObject)
	{
		TreeNode current = root;
		TreeNode<Type> splice = new TreeNode<Type>;
		splice.setDatum(NewObject);
		while (current != null)
		{
			if (current.getDatum().equals(newObject))
			{
				return false;
			}
			if (current.getDatum().compareTo(newObject) < 0)
			{
				if (current.getRight() == null)
				{
					current.setRight(splice);
					return true;
				}
				current = current.getRight();
			}
			else
			{
				if (current.getLeft() == null)
				{
					current.setLeft(splice);
					return true;
				}
				current = current.getLeft();
			}
		}
		head = splice;
		return true;
	}
	
	public boolean add(Type target)//recursive
	{
		root = add(target, root)
	}
	private TreeNode<Type> add(Type target, TreeNode<Type> current)
	{
		if (current == null)
		{
			TreeNode<Type> leaf = new TreeNode<Type>();
			leaf.setDatum(target);
			leaf.setLeft(null);
			leaf.setRight(null);
			return leaf;
		}
		if (current.getDatum().compareTo(target) < 0)
		{
			current.setRight(add(target, current.getRight()));
		}
		else
		{
			current.setLeft(add(target, current.getLeft()));
		}
		return current;
	}//end recursive
	
	public void delete(Type target)
	{
		TreeNode<Type> previous = null;
		TreeNode<Type> current = root;
		
		while ((current != null) && !(current.getDatum().equals(target)))
		{
			previous = current;
			if ( current.getDatum().compareTo(target) < 0 )
			{
				current = current.getRight();
			}
			else
			{
				current = current.getLeft();
			}
		}
		if (current == null)
		{
			throw new NoSuchElementException();
		}
		
		if (current.getRight() == null)//Case 1&2
		//this method also covers if left is null too
		{
				if (previous == null)
				{
					root = current.getLeft();
				}
				if (previous.getLeft() == current)
				{
					previous.setLeft(current.getLeft())
				}
				else
				{
					previous.setRight(current.getLeft());
				}
		}
		else if (current.getLeft() == null)//Case 1&3 
		{
			if (previous == null)
				{
					root = current.getRight();
				}
				if (previous.getLeft() == current)
				{
					previous.setLeft(current.getRight())
				}
				else
				{
					previous.setRight(current.getRight());
				}
		}
		else
		{
			TreeNode<Type> heir = current.getLeft();
			TreeNode<Type> prevHeir = current;
			while (heir.getRight() != null)
			{
				prevHeir = heir;
				heir = heir.getRight;
			}
			current.setDatum(heir.getDatum());
			if (prevHeir.getLeft() == heir)
			{
				prevHeir.setLeft(heir.getLeft());
			}
			else
			{
				prevHeir.setRight(heir.getLeft());
			}
		}
	}
	
	public void remove(Type target)//recursive
	{
		root = remove(target, root)
	}
	private TreeNode<Type> remove(Type target, TreeNode<Type> current)
	{
		if (current == null)
		{
			throw new NoSuchElementException();
		}
		if (current.getDatum().compareTo(target) < 0)
		{
			current.setRight(this.remove(target,current.getRight()));
			return current;
		}
		if (current.getDatum().compareTo(target) > 0)
		{
			current.setLeft(this.remove(target,current.getLeft()));
			return current;
		}
		if (current.getLeft() == null)
		{
			return current.getRight();
		}
		if(current.getRight() == null)	
		{
			return current.getRight();
		}
		
		TreeNode<Type> heir = current.getLeft();
		while (heir.getRight() != null)
		{
			heir = heir.getRight();
		}
		current.setDatum(heir.getDatum());
		current.setLeft(remove(heir.getDatum(), current.getLeft());
		return current;
	}//end recursive
	
	public void print(TreeNode<Type> current)//recursive
	{
		if (current == null)
		{
			return;
		}
		print(current.getLeft());//L
		System.out.println(current.getDatum);//N
		print(current.getRight());//R
	}
}














